//
//  MovieDetailViewController.swift
//  synema
//
//  Created by syndromme on 24/06/19.
//  Copyright (c) 2019 syndromme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailDisplayLogic: class
{
  func displayMovie(result: Movie)
  func displayReview(result: [MovieReview])
  func displayTrailer(result: [MovieTrailer])
}

class MovieDetailViewController: BaseTableVC, MovieDetailDisplayLogic
{
  var interactor: MovieDetailBusinessLogic?
  var router: (NSObjectProtocol & MovieDetailRoutingLogic & MovieDetailDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MovieDetailInteractor()
    let presenter = MovieDetailPresenter()
    let router = MovieDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  func setupTableView() {
    tableView.dataSource = self
    tableView.delegate = self
    tableView.tableFooterView = UIView()
    tableView.separatorInset = .zero
    tableView.register(UINib(nibName: "SegmentedCell", bundle: nil), forCellReuseIdentifier: "segmentedCell")
    tableView.register(UINib(nibName: "TrailerThumbnailCell", bundle: nil), forCellReuseIdentifier: "trailerThumbnailCell")
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  var movie: Movie?
  var trailers: [MovieTrailer] = []
  var reviews: [MovieReview] = []
  var selectedTab: TabSelection = .Left
  var page = 1
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupTableView()
    
    interactor?.fetchMovieDetail()
    interactor?.fetchTrailer()
    interactor?.fetchReview(page: page)
  }
  
  // MARK: Display
  func displayMovie(result: Movie) {
    movie = result
    title = movie?.title
    tableView.reloadData()
  }
  
  func displayReview(result: [MovieReview]) {
    reviews = result
    tableView.reloadData()
  }
  
  func displayTrailer(result: [MovieTrailer]) {
    trailers = result
    tableView.reloadData()
  }
}

extension MovieDetailViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    switch selectedTab {
    case .Left:
      return 1
    case .Middle:
      return trailers.count
    case .Right:
      return reviews.count
    }
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    switch selectedTab {
    case .Left:
      let cell = UITableViewCell(style: .default, reuseIdentifier: "cell")
      let attStr = NSMutableAttributedString(string: movie?.overview ?? "",
                                             attributes: [.font: UIFont.italicSystemFont(ofSize: 14)])
      attStr.append(NSAttributedString(string: "\n\n"))
      attStr.append(NSAttributedString(string: "Release Date: ",
                                       attributes: [.font: UIFont.boldSystemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: movie?.releaseDate.stringToDate(format: "YYYY-MM-dd").dateToString(format: "dd MMMM YYYY") ?? Date().dateToString(format: "dd MMMM YYYY"),
                                       attributes: [.font: UIFont.systemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: "\n\n"))
      attStr.append(NSAttributedString(string: "Genre: ",
                                       attributes: [.font: UIFont.boldSystemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: movie?.genres.map{ $0.genreName }.joined(separator: ", ") ?? "",
                                       attributes: [.font: UIFont.systemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: "\n\n"))
      attStr.append(NSAttributedString(string: "Homepage: ",
                                       attributes: [.font: UIFont.boldSystemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: movie?.homepage ?? "",
                                       attributes: [.font: UIFont.systemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: "\n\n"))
      attStr.append(NSAttributedString(string: "IMDb: ",
                                       attributes: [.font: UIFont.boldSystemFont(ofSize: 14)]))
      attStr.append(NSAttributedString(string: Constant.baseIMDbUrl + (movie?.imdbID ?? ""),
                                       attributes: [.font: UIFont.systemFont(ofSize: 14)]))
      
      cell.textLabel?.attributedText = attStr
      cell.textLabel?.numberOfLines = 0
      return cell
    case .Middle:
      let cell = tableView.dequeueReusableCell(withIdentifier: "trailerThumbnailCell", for: indexPath) as! TrailerThumbnailCell
      let trailer = trailers[indexPath.row]
      cell.imageURL = URL(string: String(format: Constant.baseYoutubeThumbnailUrl, arguments: [trailer.key]))
      cell.playTapped = {(sender) in
        let url = URL(string: Constant.baseYoutubeUrl + trailer.key)
        self.openURL(url: url!)
      }
      return cell
    case .Right:
      let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "cell")
      let review = reviews[indexPath.row]
      cell.textLabel?.font = UIFont.boldSystemFont(ofSize: 14)
      cell.textLabel?.text = review.author + ": "
      cell.textLabel?.numberOfLines = 0
      cell.detailTextLabel?.font = UIFont.italicSystemFont(ofSize: 14)
      cell.detailTextLabel?.text = review.content
      cell.detailTextLabel?.numberOfLines = 0
      return cell
    }
  }
  
  func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
    let cell = tableView.dequeueReusableCell(withIdentifier: "segmentedCell") as! SegmentedCell
    switch selectedTab {
    case .Middle:
      cell.segment.selectedSegmentIndex = 1
    case .Right:
      cell.segment.selectedSegmentIndex = 2
    default:
      cell.segment.selectedSegmentIndex = 0
    }
    cell.segmentTapped = {(tab) in
      self.selectedTab = tab
      self.tableView.reloadData()
    }
    return cell
  }
}

extension MovieDetailViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    if selectedTab == .Middle {
      return 175
    }
    return UITableView.automaticDimension
  }
  
  func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
    return 60
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
  }
}

extension MovieDetailViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    guard let tableView = tableView else {return}
    
    let indexes = tableView.indexPathsForVisibleRows
    let rows = indexes?.map{ $0.row }.sorted()
    if rows?.last == reviews.count - 5 && selectedTab == .Right {
      page = (reviews.count / 20 ) + 1
      interactor?.fetchReview(page: page)
    }
  }
}
