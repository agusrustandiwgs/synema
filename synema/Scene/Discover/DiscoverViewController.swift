//
//  DiscoverViewController.swift
//  synema
//
//  Created by syndromme on 24/06/19.
//  Copyright (c) 2019 syndromme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DiscoverDisplayLogic: class
{
  func displayMovies(result: [Movie])
}

class DiscoverViewController: BaseTableVC, DiscoverDisplayLogic
{
  var interactor: DiscoverBusinessLogic?
  var router: (NSObjectProtocol & DiscoverRoutingLogic & DiscoverDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DiscoverInteractor()
    let presenter = DiscoverPresenter()
    let router = DiscoverRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  func setupNav() {
    let rightBarButtonItem = UIBarButtonItem(title: "Genre", style: .done, target: self, action: #selector(filterAction(_:)))
    self.navigationItem.rightBarButtonItem = rightBarButtonItem
  }
  
  func setupCollectionView() {
    tableView.separatorInset = UIEdgeInsets.zero
    tableView.dataSource = self
    tableView.delegate = self
    tableView.register(UINib(nibName: "MovieCell", bundle: nil), forCellReuseIdentifier: "movieCell")
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  var movies: [Movie] = []
  var page = 1
  var loadMore = true
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    title = "Movies"
    
    setupNav()
    setupCollectionView()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    loadMore = true
    movies.removeAll()
    interactor?.fetchMovies(page: page)
  }
  
  // MARK: Display
  func displayMovies(result: [Movie]) {
    if loadMore {
      loadMore = false
      movies.append(contentsOf: result)
      tableView.reloadData()
    }
  }
  
  //  MARK: Action
  @IBAction func filterAction(_ sender: Any) {
    router?.routeToGenre()
  }
}

extension DiscoverViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return movies.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "movieCell", for: indexPath) as! MovieCell
    let movie = movies[indexPath.row]
    cell.imageURL = URL(string: Constant.baseImageUrl + movie.posterPath)!
    cell.movieLabel.text = movie.title
    return cell
  }
}

extension DiscoverViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return 225
  }
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    let movie = movies[indexPath.row]
    interactor?.setSelectedMovie(movie: movie)
    router?.routeToMovieDetail()
  }
}



extension DiscoverViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    guard let tableView = tableView else {return}
    
    let indexes = tableView.indexPathsForVisibleRows
    let rows = indexes?.map{ $0.row }.sorted()
    if rows?.last == movies.count - 5 {
      loadMore = true
      page = (movies.count / 20 ) + 1
      interactor?.fetchMovies(page: page)
    }
  }
}
