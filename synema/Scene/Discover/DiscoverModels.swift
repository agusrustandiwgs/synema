//
//  DiscoverModels.swift
//  synema
//
//  Created by syndromme on 24/06/19.
//  Copyright (c) 2019 syndromme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import ObjectMapper

enum Discover
{
  // MARK: Use cases
  
  enum APIModel
  {
    class Request: Mappable
    {
      var page: Int = 1
      var withGenres: String = ""
      var apiKey: String = ""
      
      required init?(map: Map) {
        apiKey          = (try? map.value("api_key")) ?? Constant.movieDBKey
      }
      
      func mapping(map: Map) {
        page            <- map["page"]
        withGenres      <- map["with_genres"]
        apiKey          <- map["api_key"]
      }
      
    }
    
    class Response: Mappable
    {
      var page: Int = 1
      var movies: [Movie] = []
      
      required init?(map: Map) {
        
      }
      
      func mapping(map: Map) {
        page      <- map["page"]
        movies    <- map["results"]
      }
    }
    
    class ViewModel: Mappable
    {
      required init?(map: Map) {
        
      }
      
      func mapping(map: Map) {
        
      }
      
    }
  }
}

class Movie: Mappable {
  
  var movieID: Int = 0
  var voteCount: Int = 0
  var video: Bool = false
  var voteAverage: Double = 0
  var title: String = ""
  var popularity: Double = 0
  var posterPath: String  = ""
  var originalLanguage: String = ""
  var originalTitle: String = ""
  var genreIds: [Int] = []
  var backdropPath: String = ""
  var adult: Bool = false
  var overview: String = ""
  var releaseDate : String =  ""
  
  var belongsToCollection: [Int] = []
  var budget: Int = 0
  var genres: [Genre] = []
  var homepage: String = ""
  var imdbID: String = ""
  var productionCompanies: [ProductionCompany] = []
  var productionCountries: [ProductionCountry] = []
  var revenue: Int = 0
  var runtime: Int = 0
  var spokenLanguages: [ProductionCountry] = []
  var status: String = ""
  var tagline: String = ""
  
  init() {
    
  }
  
  required init?(map: Map) {
    
  }
  
  func mapping(map: Map) {
    movieID           <- map["id"]
    voteCount         <- map["vote_count"]
    video             <- map["video"]
    voteAverage       <- map["vote_average"]
    title             <- map["title"]
    popularity        <- map["popularity"]
    posterPath        <- map["poster_path"]
    originalLanguage  <- map["original_language"]
    originalTitle     <- map["original_title"]
    genreIds          <- map["genre_ids"]
    backdropPath      <- map["backdrop_path"]
    adult             <- map["adult"]
    overview          <- map["overview"]
    releaseDate       <- map["release_date"]

    belongsToCollection       <- map["belongs_to_collection"]
    budget                    <- map["budget"]
    genres                    <- map["genres"]
    homepage                  <- map["homepage"]
    imdbID                    <- map["imdb_id"]
    productionCompanies       <- map["production_companies"]
    productionCountries       <- map["production_countries"]
    revenue                   <- map["revenue"]
    runtime                   <- map["runtime"]
    spokenLanguages           <- map["spoken_languages"]
    status                    <- map["status"]
    tagline                   <- map["tagline"]
  }
}

class ProductionCompany: Mappable {
  
  var companyID: String = ""
  var logoPath: String = ""
  var companyName: String = ""
  var originCountry: String = ""
  
  required init?(map: Map) {
    
  }
  
  func mapping(map: Map) {
    companyID         <- map["id"]
    logoPath          <- map["logo_path"]
    companyName       <- map["name"]
    originCountry     <- map["origin_country"]
  }
}

class ProductionCountry: Mappable {
  
  var iso: String = ""
  var name: String = ""
  
  required init?(map: Map) {
    
  }
  
  func mapping(map: Map) {
    iso           <- map["iso_639_1"]
    name          <- map["name"]
  }
}

class MovieTrailer: Mappable {
  
  var trailerID: String = ""
  var iso_639_1: String = ""
  var iso_3166_1: String = ""
  var key: String = ""
  var name: String = ""
  var site: String = ""
  var size: Int = 0
  var type: String = ""
  
  required init?(map: Map) {
    
  }
  
  func mapping(map: Map) {
    trailerID           <- map["id"]
    iso_639_1           <- map[""]
    iso_3166_1          <- map[""]
    key                 <- map["key"]
    name                <- map["name"]
    site                <- map["site"]
    size                <- map["size"]
    type                <- map["type"]
  }
}

class MovieReview: Mappable {
  
  var author: String = ""
  var content: String = ""
  var reviewID: String = ""
  var reviewURL: String = ""
  
  required init?(map: Map) {
    
  }
  
  func mapping(map: Map) {
    author            <- map["author"]
    content           <- map["content"]
    reviewID          <- map["id"]
    reviewURL         <- map["url"]
  }
}

