//
//  DiscoverInteractor.swift
//  synema
//
//  Created by syndromme on 24/06/19.
//  Copyright (c) 2019 syndromme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import Moya

protocol DiscoverBusinessLogic
{
  func setSelectedMovie(movie: Movie)
  func fetchMovies(page: Int)
}

protocol DiscoverDataStore
{
  var movie: Movie { get set }
  var genres: [Genre] { get set }
}

class DiscoverInteractor: DiscoverBusinessLogic, DiscoverDataStore
{
  var presenter: DiscoverPresentationLogic?
  var worker: DiscoverWorker?
  var movie: Movie = Movie()
  var genres: [Genre] = []
  
  // MARK: Do something
  func setSelectedMovie(movie: Movie) {
    self.movie = movie
  }
  
  func fetchMovies(page: Int = 1) {
    worker = DiscoverWorker()
    let req = Discover.APIModel.Request(JSON: ["page": page, "with_genres": genres.map{ $0.genreName }.joined(separator: ",")])
    worker?.requestMovies(request: req!)
      .subscribeOn(ConcurrentDispatchQueueScheduler(qos: .background))
      .observeOn(MainScheduler.instance)
      .subscribe(onSuccess: { (result) in
        self.presenter?.presentMovies(response: result.movies)
      }, onError: { (error) in
        let errorDict = [Constant.errorKey : error.localizedDescription]
        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "error"), object: nil, userInfo: errorDict as [AnyHashable : Any])
      })
  }
  
}
